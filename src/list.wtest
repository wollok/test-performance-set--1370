import example.*

// el set tardaba 7-10 segundos en agregar y 12 en buscar 100 elementos

test "test lista de 1000 enteros tiene buena performance" {
	const unList = []
	(1 .. 1000).forEach{ i => 
		unList.add(i * 2)
	}
	unList.contains(55)
	unList.filter { i => i.even() }.size()
	unList.map { i => i + 1 }
	unList.anyOne()
	unList.sum()
	unList.max()
	unList.fold(0, { acum, i => acum + i })
	var numbers = unList.fold(unList.anyOne(), { acum, number => acum.max(number) })
	console.println(numbers)
	console.println(unList)
	unList.take(10)
	unList.drop(10)
	unList.subList(100, 170)
	unList.find { i => i > 900 }
	unList.clear()
	assert.that(true)
}

test "test lista de un objeto definido por el usuario sin == tiene buena performance" {
	const unList = []
	(1 .. 1000).forEach{ i => 
		const nombre = "pepita" + i
		const ave = new Ave(nombre = nombre, energia = i)
		unList.add(ave)
	}
	unList.contains(unList.anyOne())
	unList.filter { ave => ave.energia() > 10 }
	unList.map { ave => ave.energia() }
	unList.anyOne()
	unList.take(10)
	unList.drop(10)
	unList.subList(100, 170)
	unList.find { ave => ave.energia() > 105 }
	unList.sum({ ave => ave.energia() })
	unList.max()
	unList.fold(0, { acum, ave => acum + ave.energia() })
	unList.clear()
	assert.that(true)
}

test "test lista de un objeto definido por el usuario con == y sin > tiene buena performance" {
	const unList = []
	(1 .. 1000).forEach{ i => 
		const nombre = "pepita" + i
		const ave = new AveLoca(nombre = nombre, energia = i)
		unList.add(ave)
	}
	unList.contains(unList.anyOne())
	unList.filter { ave => ave.energia() > 10 }
	unList.map { ave => ave.energia() }
	unList.anyOne()
	unList.take(10)
	unList.drop(10)
	unList.subList(100, 170)
	unList.find { ave => ave.energia() > 105 }
	unList.sum({ ave => ave.energia() })
	unList.max()
	unList.fold(0, { acum, ave => acum + ave.energia() })
	unList.clear()
	assert.that(true)
}

test "test lista de un objeto definido por el usuario con == y > tiene buena performance" {
	const unList = []
	(1 .. 1000).forEach{ i => 
		const nombre = "pepita" + i
		const ave = new AveMagica(nombre = nombre, energia = i)
		unList.add(ave)
	}
	unList.contains(unList.anyOne())
	unList.filter { ave => ave.energia() > 10 }
	unList.map { ave => ave.energia() }
	unList.anyOne()
	unList.take(10)
	unList.drop(10)
	unList.subList(100, 170)
	unList.find { ave => ave.energia() > 105 }
	unList.sum({ ave => ave.energia() })
	unList.max()
	unList.fold(0, { acum, ave => acum + ave.energia() })
	unList.clear()
	assert.that(true)
}

test "test lista de strings tiene buena performance" {
	const unList = []
	(1 .. 1000).forEach{ i => 
		unList.add("hola" + i)
	}
	unList.contains("hola88")
	unList.filter { unString => unString.length().even() }
	unList.map { unString => unString.length() }
	unList.anyOne()
	unList.take(10)
	unList.drop(10)
	unList.subList(100, 170)
	unList.find { s => s == "hola809" }
	unList.sum({ unString => unString.length() })
	unList.max()
	unList.fold(0, { acum, unString => acum + unString.length() })
	unList.clear()
	assert.that(true)
}

test "test lista de dates tiene buena performance" {
	const unList = []
	(1 .. 1000).forEach{ i => 
		unList.add(new Date(1, 1, 1900 + i))
	}
	unList.contains(new Date(1, 1, 1902))
	unList.filter { unDate => unDate.month() == 2 }
	unList.map { unDate => unDate.year() }
	unList.anyOne()
	unList.take(10)
	unList.drop(10)
	unList.subList(100, 170)
	unList.find { d => d.year() > 1990 }
	unList.sum({ unDate => unDate.month() })
	unList.max()
	unList.fold(0, { acum, unDate => acum + unDate.month() })
	unList.clear()
	assert.that(true)
}

test "test lista de booleanos tiene buena performance" {
	const unList = []
	(1 .. 1000).forEach{ i => 
		unList.add(true)
	}
	unList.contains(false)
	unList.filter { unBoolean => unBoolean }
	unList.map { unBoolean => not unBoolean }
	unList.anyOne()
	unList.take(10)
	unList.drop(10)
	unList.subList(100, 170)
	unList.find { b => b }
	unList.sum({ unBoolean => if (unBoolean) 1 else 0 })
	unList.max()
	unList.fold(0, { acum, unBoolean => acum + (if (unBoolean) 1 else 0) })
	unList.clear()
	assert.that(true)
}